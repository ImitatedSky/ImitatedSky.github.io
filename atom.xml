<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Imisky</title>
  
  
  <link href="https://pochunyeh.com/atom.xml" rel="self"/>
  
  <link href="https://pochunyeh.com/"/>
  <updated>2025-02-18T07:13:24.478Z</updated>
  <id>https://pochunyeh.com/</id>
  
  <author>
    <name>ImitatedSky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode#36. Valid Sudoku</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-36-Valid-Sudoku/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-36-Valid-Sudoku/</id>
    <published>2025-02-18T07:11:49.000Z</published>
    <updated>2025-02-18T07:13:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Determine if a <code>9 x 9</code> Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p><ol><li>Each row must contain the digits <code>1-9</code> without repetition.</li><li>Each column must contain the digits <code>1-9</code> without repetition.</li><li>Each of the nine <code>3 x 3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li></ol><p><strong>Note:</strong></p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li></ul><p><strong>Example 1:</strong></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png"></p><p>!<a href="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png">https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input: board =</span><br><span class="line">[[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Input: board =</span><br><span class="line">[[&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;]</span><br><span class="line">,[&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;]</span><br><span class="line">,[&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;]</span><br><span class="line">,[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Same as Example 1, except with the5 in the top left corner being modified to8. Since there are two 8&#x27;s in the top left 3x3 sub-box, it is invalid.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>&#39;.&#39;</code>.</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h3 id="sol1暴力解"><a href="#sol1暴力解" class="headerlink" title="sol1暴力解"></a>sol1暴力解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValidSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="number">9</span>):</span><br><span class="line">                    <span class="keyword">if</span> i != k <span class="keyword">and</span> board[i][j] == board[k][j]:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(j,<span class="number">9</span>):</span><br><span class="line">                    <span class="keyword">if</span> l != j <span class="keyword">and</span> board[i][j] == board[i][l]:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        box = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&quot;.&quot;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                pos = (i//<span class="number">3</span>,j//<span class="number">3</span>)</span><br><span class="line">                <span class="keyword">if</span> pos <span class="keyword">not</span> <span class="keyword">in</span> box:</span><br><span class="line">                    box[pos] = []</span><br><span class="line">                <span class="keyword">if</span> board[i][j] <span class="keyword">in</span> box[pos]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    box[pos].append(board[i][j])</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="sol2"><a href="#sol2" class="headerlink" title="sol2"></a>sol2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValidSudoku</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        rows = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        cols = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line">        boxes = [<span class="built_in">set</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                num = board[i][j]</span><br><span class="line">                <span class="keyword">if</span> num == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> num <span class="keyword">in</span> rows[i]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                rows[i].add(num)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> num <span class="keyword">in</span> cols[j]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                cols[j].add(num)</span><br><span class="line"></span><br><span class="line">                box_index = (i // <span class="number">3</span>) * <span class="number">3</span> + (j // <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">if</span> num <span class="keyword">in</span> boxes[box_index]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                boxes[box_index].add(num)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>特殊解</p><p>直接計算個數方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValidSudoku</span>(<span class="params">self, board</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">                element = board[i][j]</span><br><span class="line">                <span class="keyword">if</span> element != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    res += [(i, element), (element, j), (i // <span class="number">3</span>, j // <span class="number">3</span>, element)]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(res) == <span class="built_in">len</span>(<span class="built_in">set</span>(res))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Determine if a &lt;code&gt;9 x 9&lt;/code&gt; Sud</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Hash Table" scheme="https://pochunyeh.com/tags/Hash-Table/"/>
    
    <category term="Matrix" scheme="https://pochunyeh.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#300. Longest Increasing Subsequence</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-300-Longest-Increasing-Subsequence/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-300-Longest-Increasing-Subsequence/</id>
    <published>2024-09-10T07:16:35.000Z</published>
    <updated>2024-09-10T07:17:00.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>strictly increasing</strong></em></p><p><em><strong>subsequence</strong></em></p><p>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,1,0,3,2,3]</span><br><span class="line">Output: 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [7,7,7,7,7,7,7]</span><br><span class="line">Output: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2500</code></li><li><code>104 &lt;= nums[i] &lt;= 104</code></li></ul><p><strong>Follow up:</strong> Can you come up with an algorithm that runs in <code>O(n log(n))</code> time complexity?</p><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lengthOfLIS</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="number">1</span>]*(<span class="built_in">len</span>(nums)+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(nums) ):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                <span class="keyword">if</span> nums[j] &lt; nums[i]:</span><br><span class="line">                    dp[i] = <span class="built_in">max</span>( dp[i] , dp[j] + <span class="number">1</span> )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>寫的時候1次過，嘿嘿<a href="https://symbols.wisdom-life.in/zh-TW/emoticon/shy"><strong>(,,・ω・,,)</strong></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/co</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Dynamic Programming" scheme="https://pochunyeh.com/tags/Dynamic-Programming/"/>
    
    <category term="hard" scheme="https://pochunyeh.com/tags/hard/"/>
    
    <category term="Binary Search" scheme="https://pochunyeh.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#949. Largest Time for Given Digits</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-949-Largest-Time-for-Given-Digits/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-949-Largest-Time-for-Given-Digits/</id>
    <published>2024-09-10T07:12:49.000Z</published>
    <updated>2024-09-10T07:13:19.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an array <code>arr</code> of 4 digits, find the latest 24-hour time that can be made using each digit <strong>exactly once</strong>.</p><p>24-hour times are formatted as <code>&quot;HH:MM&quot;</code>, where <code>HH</code> is between <code>00</code> and <code>23</code>, and <code>MM</code> is between <code>00</code> and <code>59</code>. The earliest 24-hour time is <code>00:00</code>, and the latest is <code>23:59</code>.</p><p>Return <em>the latest 24-hour time in <code>&quot;HH:MM&quot;</code> format</em>. If no valid time can be made, return an empty string.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [1,2,3,4]</span><br><span class="line">Output: &quot;23:41&quot;</span><br><span class="line">Explanation: The valid 24-hour times are &quot;12:34&quot;, &quot;12:43&quot;, &quot;13:24&quot;, &quot;13:42&quot;, &quot;14:23&quot;, &quot;14:32&quot;, &quot;21:34&quot;, &quot;21:43&quot;, &quot;23:14&quot;, and &quot;23:41&quot;. Of these times, &quot;23:41&quot; is the latest.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: arr = [5,5,5,5]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There are no valid 24-hour times as &quot;55:55&quot; is not valid.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>arr.length == 4</code></li><li><code>0 &lt;= arr[i] &lt;= 9</code></li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h3 id="暴力解"><a href="#暴力解" class="headerlink" title="暴力解"></a>暴力解</h3><p>很醜O(n^4)<br>但是因為 n最大也是4</p><p>所以沒超出時間</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">largestTimeFromDigits</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">hh , mm</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(hh) &lt; <span class="number">24</span> <span class="keyword">and</span> <span class="built_in">int</span>(mm) &lt;<span class="number">60</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        memo = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                        <span class="keyword">if</span> i!=j <span class="keyword">and</span> i!=k <span class="keyword">and</span> i!=l <span class="keyword">and</span> j!=k <span class="keyword">and</span> j!=l <span class="keyword">and</span> k!=l:</span><br><span class="line">                            <span class="keyword">if</span> isValid( <span class="built_in">str</span>(arr[i]) + <span class="built_in">str</span>(arr[j]) , <span class="built_in">str</span>(arr[k]) + <span class="built_in">str</span>(arr[l]) ):</span><br><span class="line">                                memo.append( <span class="built_in">str</span>(arr[i]) + <span class="built_in">str</span>(arr[j]) + <span class="built_in">str</span>(arr[k]) + <span class="built_in">str</span>(arr[l]) )</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> memo:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        res = <span class="built_in">max</span>(memo)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(res)[:<span class="number">2</span>] + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(res)[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given an array &lt;code&gt;arr&lt;/code&gt; of 4 </summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="String" scheme="https://pochunyeh.com/tags/String/"/>
    
    <category term="Enumeration" scheme="https://pochunyeh.com/tags/Enumeration/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#134. Gas Station</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-134-Gas-Station/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-134-Gas-Station/</id>
    <published>2024-09-10T07:05:41.000Z</published>
    <updated>2024-09-10T07:06:08.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>ith</code> station is <code>gas[i]</code>.</p><p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>ith</code> station to its next <code>(i + 1)th</code> station. You begin the journey with an empty tank at one of the gas stations.</p><p>Given two integer arrays <code>gas</code> and <code>cost</code>, return <em>the starting gas station’s index if you can travel around the circuit once in the clockwise direction, otherwise return</em> <code>-1</code>. If there exists a solution, it is <strong>guaranteed</strong> to be <strong>unique</strong></p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4</span><br><span class="line">Travel to station 4. Your tank = 4 - 1 + 5 = 8</span><br><span class="line">Travel to station 0. Your tank = 8 - 2 + 1 = 7</span><br><span class="line">Travel to station 1. Your tank = 7 - 3 + 2 = 6</span><br><span class="line">Travel to station 2. Your tank = 6 - 4 + 3 = 5</span><br><span class="line">Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.</span><br><span class="line">Therefore, return 3 as the starting index.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: gas = [2,3,4], cost = [3,4,3]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation:</span><br><span class="line">You can&#x27;t start at station 0 or 1, as there is not enough gas to travel to the next station.</span><br><span class="line">Let&#x27;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4</span><br><span class="line">Travel to station 0. Your tank = 4 - 3 + 2 = 3</span><br><span class="line">Travel to station 1. Your tank = 3 - 3 + 3 = 3</span><br><span class="line">You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.</span><br><span class="line">Therefore, you can&#x27;t travel around the circuit once no matter where you start.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>n == gas.length == cost.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= gas[i], cost[i] &lt;= 104</code></li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canCompleteCircuit</span>(<span class="params">self, gas: <span class="type">List</span>[<span class="built_in">int</span>], cost: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(gas) &lt; <span class="built_in">sum</span>(cost):</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="comment"># 否則應能順利跑完 重點!</span></span><br><span class="line">        tank = <span class="number">0</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(gas) ) :</span><br><span class="line">            tank += gas[i]-cost[i]</span><br><span class="line">            <span class="keyword">if</span> tank &lt; <span class="number">0</span>:</span><br><span class="line">                tank = <span class="number">0</span></span><br><span class="line">                start = i + <span class="number">1</span> <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br></pre></td></tr></table></figure><h3 id="錯誤紀錄"><a href="#錯誤紀錄" class="headerlink" title="錯誤紀錄"></a>錯誤紀錄</h3><p>超過時間外，當相減&#x3D;&#x3D;0沒判決成功</p><p>ex: [0,0] [0,0]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canCompleteCircuit</span>(<span class="params">self, gas: <span class="type">List</span>[<span class="built_in">int</span>], cost: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        fill = [ a-b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(gas,cost) ]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(fill) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(fill) ):</span><br><span class="line">            tank = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(fill) ):</span><br><span class="line">                cur = (i+j)%(<span class="built_in">len</span>(fill))</span><br><span class="line"></span><br><span class="line">                tank += fill[cur]</span><br><span class="line">                <span class="keyword">if</span> tank &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> j == <span class="built_in">len</span>(fill) - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;There are &lt;code&gt;n&lt;/code&gt; gas stations</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Greedy" scheme="https://pochunyeh.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#133. Clone Graph</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-133-Clone-Graph/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-133-Clone-Graph/</id>
    <published>2024-09-09T08:18:28.000Z</published>
    <updated>2024-09-09T08:48:06.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a reference of a node in a <a href="https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph"><strong>connected</strong></a> undirected graph.</p><p>Return a <a href="https://en.wikipedia.org/wiki/Object_copying#Deep_copy"><strong>deep copy</strong></a> (clone) of the graph.</p><p>Each node in the graph contains a value (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Node &#123;</span><br><span class="line">    public int val;</span><br><span class="line">    public List&lt;Node&gt; neighbors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Test case format:</strong></p><p>For simplicity, each node’s value is the same as the node’s index (1-indexed). For example, the first node with <code>val == 1</code>, the second node with <code>val == 2</code>, and so on. The graph is represented in the test case using an adjacency list.</p><p><strong>An adjacency list</strong> is a collection of unordered <strong>lists</strong> used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p><p>The given node will always be the first node with <code>val = 1</code>. You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.</p><p><strong>Example 1:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png">https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png</a></p><p><img src="https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: adjList = [[2,4],[1,3],[2,4],[1,3]]</span><br><span class="line">Output: [[2,4],[1,3],[2,4],[1,3]]</span><br><span class="line">Explanation: There are 4 nodes in the graph.</span><br><span class="line">1st node (val = 1)&#x27;s neighbors are 2nd node (val = 2) and 4th node (val = 4).</span><br><span class="line">2nd node (val = 2)&#x27;s neighbors are 1st node (val = 1) and 3rd node (val = 3).</span><br><span class="line">3rd node (val = 3)&#x27;s neighbors are 2nd node (val = 2) and 4th node (val = 4).</span><br><span class="line">4th node (val = 4)&#x27;s neighbors are 1st node (val = 1) and 3rd node (val = 3).</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2020/01/07/graph.png">https://assets.leetcode.com/uploads/2020/01/07/graph.png</a></p><p><img src="https://assets.leetcode.com/uploads/2020/01/07/graph.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: adjList = [[]]</span><br><span class="line">Output: [[]]</span><br><span class="line">Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: adjList = []</span><br><span class="line">Output: []</span><br><span class="line">Explanation: This an empty graph, it does not have any nodes.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the graph is in the range <code>[0, 100]</code>.</li><li><code>1 &lt;= Node.val &lt;= 100</code></li><li><code>Node.val</code> is unique for each node.</li><li>There are no repeated edges and no self-loops in the graph.</li><li>The Graph is connected and all nodes can be visited starting from the given node.</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val = 0, neighbors = None):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.neighbors = neighbors if neighbors is not None else []</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cloneGraph</span>(<span class="params">self, node: <span class="type">Optional</span>[<span class="string">&#x27;Node&#x27;</span>]</span>) -&gt; <span class="type">Optional</span>[<span class="string">&#x27;Node&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        visit = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">in</span> visit:</span><br><span class="line">                <span class="keyword">return</span> visit[node]</span><br><span class="line">            </span><br><span class="line">            clone = Node(node.val)</span><br><span class="line">            visit[node] = clone</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> nei <span class="keyword">in</span> node.neighbors:</span><br><span class="line">                neighbor = dfs(nei)</span><br><span class="line">                clone.neighbors.append(neighbor)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> clone</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dfs(node)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given a reference of a node in a &lt;a h</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Depth-First Search" scheme="https://pochunyeh.com/tags/Depth-First-Search/"/>
    
    <category term="Breadth-First Search" scheme="https://pochunyeh.com/tags/Breadth-First-Search/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Hash Table" scheme="https://pochunyeh.com/tags/Hash-Table/"/>
    
    <category term="Graph" scheme="https://pochunyeh.com/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#205. Isomorphic Strings</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-205-Isomorphic-Strings/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-205-Isomorphic-Strings/</id>
    <published>2024-08-30T09:24:55.000Z</published>
    <updated>2024-08-30T09:25:19.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given two strings <code>s</code> and <code>t</code>, <em>determine if they are isomorphic</em>.</p><p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p><p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> s &#x3D; “egg”, t &#x3D; “add”</p><p><strong>Output:</strong> true</p><p><strong>Explanation:</strong></p><p>The strings <code>s</code> and <code>t</code> can be made identical by:</p><ul><li>Mapping <code>&#39;e&#39;</code> to <code>&#39;a&#39;</code>.</li><li>Mapping <code>&#39;g&#39;</code> to <code>&#39;d&#39;</code>.</li></ul><p><strong>Example 2:</strong></p><p><strong>Input:</strong> s &#x3D; “foo”, t &#x3D; “bar”</p><p><strong>Output:</strong> false</p><p><strong>Explanation:</strong></p><p>The strings <code>s</code> and <code>t</code> can not be made identical as <code>&#39;o&#39;</code> needs to be mapped to both <code>&#39;a&#39;</code> and <code>&#39;r&#39;</code>.</p><p><strong>Example 3:</strong></p><p><strong>Input:</strong> s &#x3D; “paper”, t &#x3D; “title”</p><p><strong>Output:</strong> true</p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 5 * 104</code></li><li><code>t.length == s.length</code></li><li><code>s</code> and <code>t</code> consist of any valid ascii character.</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isIsomorphic</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) != <span class="built_in">len</span>(t):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        st_map = &#123;&#125;</span><br><span class="line">        ts_map = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> st_map:</span><br><span class="line">                st_map[s[i]] = t[i]</span><br><span class="line">            <span class="keyword">if</span> t[i] <span class="keyword">not</span> <span class="keyword">in</span> ts_map:</span><br><span class="line">                ts_map[t[i]] = s[i]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> st_map[s[i]] != t[i] <span class="keyword">or</span> ts_map[t[i]] != s[i]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="還不錯的"><a href="#還不錯的" class="headerlink" title="還不錯的"></a>還不錯的</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isIsomorphic</span>(<span class="params">self, s: <span class="built_in">str</span>, t: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        s_map = []</span><br><span class="line">        t_map = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            s_map.append(s.index(c))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> t:</span><br><span class="line">            t_map.append(t.index(c))</span><br><span class="line">        <span class="keyword">if</span> s_map == t_map:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given two strings &lt;code&gt;s&lt;/code&gt; and </summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="easy" scheme="https://pochunyeh.com/tags/easy/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Hash Table" scheme="https://pochunyeh.com/tags/Hash-Table/"/>
    
    <category term="String" scheme="https://pochunyeh.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#383. Ransom Note</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-383-Ransom-Note/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-383-Ransom-Note/</id>
    <published>2024-08-30T09:01:03.000Z</published>
    <updated>2024-08-30T09:01:53.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given two strings <code>ransomNote</code> and <code>magazine</code>, return <code>true</code> <em>if</em> <code>ransomNote</code> <em>can be constructed by using the letters from</em> <code>magazine</code> <em>and</em> <code>false</code> <em>otherwise</em>.</p><p>Each letter in <code>magazine</code> can only be used once in <code>ransomNote</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li><li><code>ransomNote</code> and <code>magazine</code> consist of lowercase English letters.</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        r_hashmap = &#123;&#125;</span><br><span class="line">        m_hashmap = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ransomNote)):</span><br><span class="line">            <span class="keyword">if</span> ransomNote[i] <span class="keyword">in</span> r_hashmap:</span><br><span class="line">                r_hashmap[ ransomNote[i]  ] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r_hashmap[ ransomNote[i]  ] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(magazine)):</span><br><span class="line">            <span class="keyword">if</span> magazine[i] <span class="keyword">in</span> m_hashmap:</span><br><span class="line">                m_hashmap[ magazine[i]  ] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m_hashmap[ magazine[i]  ] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> r_hashmap:</span><br><span class="line">            <span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> magazine <span class="keyword">or</span> r_hashmap[a] &gt; m_hashmap[a] :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>把可讀性寫好一點</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        r_hashmap = &#123;&#125;</span><br><span class="line">        m_hashmap = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> ransomNote:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> r_hashmap:</span><br><span class="line">                r_hashmap[ c  ] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r_hashmap[ c  ] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> magazine:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> m_hashmap:</span><br><span class="line">                m_hashmap[ c  ] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m_hashmap[ c  ] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> r_hashmap:</span><br><span class="line">            <span class="keyword">if</span> a <span class="keyword">not</span> <span class="keyword">in</span> magazine <span class="keyword">or</span> r_hashmap[a] &gt; m_hashmap[a] :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="優化1"><a href="#優化1" class="headerlink" title="優化1"></a>優化1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m_hashmap = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> magazine:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> m_hashmap:</span><br><span class="line">                m_hashmap[ c  ] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m_hashmap[ c  ] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> ransomNote:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> m_hashmap <span class="keyword">or</span> m_hashmap[c] - <span class="number">1</span> &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            m_hashmap[c] -= <span class="number">1</span> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="看到好的解法"><a href="#看到好的解法" class="headerlink" title="看到好的解法"></a>看到好的解法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canConstruct</span>(<span class="params">self, ransomNote: <span class="built_in">str</span>, magazine: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">set</span>(ransomNote):</span><br><span class="line">            <span class="keyword">if</span> magazine.count(c)&lt;ransomNote.count(c):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given two strings &lt;code&gt;ransomNote&lt;/c</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="easy" scheme="https://pochunyeh.com/tags/easy/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Hash Table" scheme="https://pochunyeh.com/tags/Hash-Table/"/>
    
    <category term="String" scheme="https://pochunyeh.com/tags/String/"/>
    
    <category term="Counting" scheme="https://pochunyeh.com/tags/Counting/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#20. Valid Parentheses</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-20-Valid-Parentheses/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-20-Valid-Parentheses/</id>
    <published>2024-07-04T02:20:41.000Z</published>
    <updated>2024-07-04T02:21:03.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;&#123;&#39;</code>, <code>&#39;&#125;&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li><li>Every close bracket has a corresponding open bracket of the same type.</li></ol><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;()&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;(]&quot;</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> consists of parentheses only <code>&#39;()[]&#123;&#125;&#39;</code>.</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        brackets = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">brackets</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="built_in">len</span>(brackets) &gt;= <span class="number">2</span> <span class="keyword">and</span> is_valid( brackets[-<span class="number">2</span>] , brackets[-<span class="number">1</span>]  ):</span><br><span class="line">                brackets.pop()</span><br><span class="line">                brackets.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">s1,s2</span>):</span><br><span class="line">            <span class="keyword">if</span> s1 == <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> s2 == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> s1 == <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">and</span> s2 == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> s1 == <span class="string">&#x27;[&#x27;</span> <span class="keyword">and</span> s2 == <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            brackets.append(s[i])</span><br><span class="line">            check(brackets)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 空的返回 true</span></span><br><span class="line">        <span class="comment"># print(brackets)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> brackets</span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt; contain</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="easy" scheme="https://pochunyeh.com/tags/easy/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Stack" scheme="https://pochunyeh.com/tags/Stack/"/>
    
    <category term="String" scheme="https://pochunyeh.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#1319. Number of Operations to Make Network Connected</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-1319-Number-of-Operations-to-Make-Network-Connected/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-1319-Number-of-Operations-to-Make-Network-Connected/</id>
    <published>2024-07-02T05:35:58.000Z</published>
    <updated>2024-07-02T05:36:13.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>There are <code>n</code> computers numbered from <code>0</code> to <code>n - 1</code> connected by ethernet cables <code>connections</code> forming a network where <code>connections[i] = [ai, bi]</code> represents a connection between computers <code>ai</code> and <code>bi</code>. Any computer can reach any other computer directly or indirectly through the network.</p><p>You are given an initial computer network <code>connections</code>. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.</p><p>Return <em>the minimum number of times you need to do this in order to make all the computers connected</em>. If it is not possible, return <code>-1</code>.</p><p><strong>Example 1:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2020/01/02/sample_1_1677.png">https://assets.leetcode.com/uploads/2020/01/02/sample_1_1677.png</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 4, connections = [[0,1],[0,2],[1,2]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2020/01/02/sample_2_1677.png">https://assets.leetcode.com/uploads/2020/01/02/sample_2_1677.png</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]</span><br><span class="line">Output: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: There are not enough cables.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= connections.length &lt;= min(n * (n - 1) / 2, 105)</code></li><li><code>connections[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt; n</code></li><li><code>ai != bi</code></li><li>There are no repeated connections.</li><li>No two computers are connected by more than one cable.</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">makeConnected</span>(<span class="params">self, n: <span class="built_in">int</span>, connections: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n-<span class="number">1</span> &gt; <span class="built_in">len</span>(connections)  :</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        p = [i <span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(n) ]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> x != p[x]:</span><br><span class="line">                p[x] = find( p[x] )</span><br><span class="line">            <span class="keyword">return</span> p[x]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params"> u , v</span>):</span><br><span class="line">            pu = find(u)</span><br><span class="line">            pv = find(v)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> pu != pv:</span><br><span class="line">                <span class="comment"># 連接一個</span></span><br><span class="line">                p[pu] = pv </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> conn <span class="keyword">in</span> connections:</span><br><span class="line"></span><br><span class="line">            union( conn[<span class="number">0</span>] , conn[<span class="number">1</span>] )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 算有幾個獨立的</span></span><br><span class="line">        pset = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            pset.add(find(i))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(pset) -<span class="number">1</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;There are &lt;code&gt;n&lt;/code&gt; computers nu</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Depth-First Search" scheme="https://pochunyeh.com/tags/Depth-First-Search/"/>
    
    <category term="Breadth-First Search" scheme="https://pochunyeh.com/tags/Breadth-First-Search/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Union Find" scheme="https://pochunyeh.com/tags/Union-Find/"/>
    
    <category term="Graph" scheme="https://pochunyeh.com/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#114. Flatten Binary Tree to Linked List</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-114-Flatten-Binary-Tree-to-Linked-List/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-114-Flatten-Binary-Tree-to-Linked-List/</id>
    <published>2024-06-30T18:24:49.000Z</published>
    <updated>2024-06-30T18:25:35.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>root</code> of a binary tree, flatten the tree into a “linked list”:</p><ul><li>The “linked list” should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>.</li><li>The “linked list” should be in the same order as a <a href="https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR"><strong>pre-order traversal</strong></a> of the binary tree.</li></ul><p><strong>Example 1:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg">https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg</a></p><p><img src="https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,2,5,3,4,null,6]</span><br><span class="line">Output: [1,null,2,null,3,null,4,null,5,null,6]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [0]</span><br><span class="line">Output: [0]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li><li><code>100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>Follow up:</strong></p><p>Can you flatten the tree in-place (with</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(1)</span><br></pre></td></tr></table></figure><p>extra space)?</p><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>前幾次試錯直接對<a href="https://symbols.wisdom-life.in/zh-TW/emoticon/shy"><strong>(,,・ω・,,)</strong></a></p><p>想法沒錯後，直接DFS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">flatten</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root :</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        left = root.left</span><br><span class="line">        right = root.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">findlast</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                node = findlast(node.right)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        root.left = <span class="literal">None</span> <span class="comment">#記得把左清空</span></span><br><span class="line">        root.right = self.flatten(left)</span><br><span class="line">        findlast(root).right = self.flatten(right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a bina</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Tree" scheme="https://pochunyeh.com/tags/Tree/"/>
    
    <category term="Depth-First Search" scheme="https://pochunyeh.com/tags/Depth-First-Search/"/>
    
    <category term="Binary Tree" scheme="https://pochunyeh.com/tags/Binary-Tree/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Linked List" scheme="https://pochunyeh.com/tags/Linked-List/"/>
    
    <category term="Stack" scheme="https://pochunyeh.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#450. Delete Node in a BST</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-450-Delete-Node-in-a-BST/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-450-Delete-Node-in-a-BST/</id>
    <published>2024-06-30T14:42:10.000Z</published>
    <updated>2024-06-30T14:42:29.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return <em>the <strong>root node reference</strong> (possibly updated) of the BST</em>.</p><p>Basically, the deletion can be divided into two stages:</p><ol><li>Search for a node to remove.</li><li>If the node is found, delete the node.</li></ol><p><strong>Example 1:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg">https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg</a></p><p><img src="https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [5,3,6,2,4,null,7], key = 3</span><br><span class="line">Output: [5,4,6,2,null,null,7]</span><br><span class="line">Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.</span><br><span class="line">One valid answer is [5,4,6,2,null,null,7], shown in the above BST.</span><br><span class="line">Please notice that another valid answer is [5,2,6,null,4,null,7] and it&#x27;s also accepted.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>!<a href="https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg">https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg</a></p><p><img src="https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg"></p><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [5,3,6,2,4,null,7], key = 0</span><br><span class="line">Output: [5,3,6,2,4,null,7]</span><br><span class="line">Explanation: The tree does not contain a node with value = 0.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [], key = 0</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li><li><code>105 &lt;= Node.val &lt;= 105</code></li><li>Each node has a <strong>unique</strong> value.</li><li><code>root</code> is a valid binary search tree.</li><li><code>105 &lt;= key &lt;= 105</code></li></ul><p><strong>Follow up:</strong> Could you solve it with time complexity <code>O(height of tree)</code>?</p><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>照BST 的刪除方法</p><p>第一次解意外的難，但是看過的書上(王者歸來)有詳解，當時還覺得簡單呢</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteNode</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode], key: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root :</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">findmin</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="comment"># inorder -&gt; 找第一個就好(因為bst 所以第一個會是最小的)</span></span><br><span class="line">            <span class="comment"># while node.left:</span></span><br><span class="line">            <span class="comment">#     node = node.left</span></span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                node = findmin(node.left)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> key &lt; root.val:</span><br><span class="line">            root.left = self.deleteNode(root.left , key)</span><br><span class="line">        <span class="keyword">elif</span> root.val &lt; key:</span><br><span class="line">            root.right = self.deleteNode(root.right , key)</span><br><span class="line">        <span class="keyword">elif</span> root.val == key:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.left:</span><br><span class="line">                <span class="keyword">return</span> root.right</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> root.right:</span><br><span class="line">                <span class="keyword">return</span> root.left</span><br><span class="line">            </span><br><span class="line">            min_node = findmin(root.right)</span><br><span class="line">            root.val = min_node.val</span><br><span class="line">            root.right = self.deleteNode(root.right , min_node.val)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="原先寫的錯誤"><a href="#原先寫的錯誤" class="headerlink" title="原先寫的錯誤"></a>原先寫的錯誤</h3><p>沒有依照bst 的刪除程序(如果右邊的補上來，應該找右邊最小的當根、如果左邊的補上來，應該找左邊最大的當根)</p><p>資測只有 71 &#x2F; 92 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteNode</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode], key: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">node , key</span>):</span><br><span class="line"></span><br><span class="line">            left = node.left</span><br><span class="line">            right = node.right</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">and</span> <span class="keyword">not</span> right:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> right :</span><br><span class="line">                node.val = right.val</span><br><span class="line">                node.right = delete(right , right.val )</span><br><span class="line">                node.left = left</span><br><span class="line">            <span class="keyword">elif</span> left:</span><br><span class="line">                node.val = left.val</span><br><span class="line">                node.left = delete(left , left.val )</span><br><span class="line">                node.right = right </span><br><span class="line">                 </span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            left = node.left</span><br><span class="line">            right = node.right</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left <span class="keyword">and</span> left.val == key:</span><br><span class="line">                node.left = delete(left , key)</span><br><span class="line">            <span class="keyword">if</span> right <span class="keyword">and</span> right.val == key:</span><br><span class="line">                node.right = delete(right , key)</span><br><span class="line"></span><br><span class="line">            bfs(left)</span><br><span class="line">            bfs(right)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.val == key:</span><br><span class="line">            <span class="keyword">return</span> delete(root,key)</span><br><span class="line">        </span><br><span class="line">        bfs(root )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given a root node reference of a BST </summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Tree" scheme="https://pochunyeh.com/tags/Tree/"/>
    
    <category term="Binary Tree" scheme="https://pochunyeh.com/tags/Binary-Tree/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Binary Search Tree" scheme="https://pochunyeh.com/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#101. Symmetric Tree</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-101-Symmetric-Tree/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-101-Symmetric-Tree/</id>
    <published>2024-06-30T00:23:00.000Z</published>
    <updated>2024-06-30T00:23:32.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>root</code> of a binary tree, <em>check whether it is a mirror of itself</em> (i.e., symmetric around its center).</p><p><strong>Example 1:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg">https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg</a></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,2,2,3,4,4,3]</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg">https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg</a></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,2,2,null,3,null,3]</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li><li><code>100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>Follow up:</strong></p><p>Could you solve it both recursively and iteratively?</p><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSymmetric</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">left,right</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">and</span> <span class="keyword">not</span> right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">or</span> <span class="keyword">not</span> right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> left.val == right.val <span class="keyword">and</span> dfs(left.left,right.right) <span class="keyword">and</span> dfs(left.right, right.left)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dfs(root.left , root.right)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a bina</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="easy" scheme="https://pochunyeh.com/tags/easy/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Tree" scheme="https://pochunyeh.com/tags/Tree/"/>
    
    <category term="Depth-First Search" scheme="https://pochunyeh.com/tags/Depth-First-Search/"/>
    
    <category term="Breadth-First Search" scheme="https://pochunyeh.com/tags/Breadth-First-Search/"/>
    
    <category term="Binary Tree" scheme="https://pochunyeh.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#322. Coin Change</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-322-Coin-Change/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-322-Coin-Change/</id>
    <published>2024-06-29T23:46:42.000Z</published>
    <updated>2024-06-29T23:48:43.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p>You may assume that you have an infinite number of each kind of coin.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: coins = [1,2,5], amount = 11</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: 11 = 5 + 5 + 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: coins = [2], amount = 3</span><br><span class="line">Output: -1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: coins = [1], amount = 0</span><br><span class="line">Output: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= amount &lt;= 104</code></li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coinChange</span>(<span class="params">self, coins: <span class="type">List</span>[<span class="built_in">int</span>], amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        dp = [ amount + <span class="number">1</span> ]*(amount + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( amount+<span class="number">1</span> ):</span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">                <span class="keyword">if</span> i - coin &gt;= <span class="number">0</span>:</span><br><span class="line">                    dp[i] = <span class="built_in">min</span>(dp[i] , <span class="number">1</span> + dp[ i - coin ])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> dp[ amount ] == amount + <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[amount]</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;You are given an integer array &lt;code&gt;</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Breadth-First Search" scheme="https://pochunyeh.com/tags/Breadth-First-Search/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Dynamic Programming" scheme="https://pochunyeh.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#104. Maximum Depth of Binary Tree</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-104-Maximum-Depth-of-Binary-Tree/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-104-Maximum-Depth-of-Binary-Tree/</id>
    <published>2024-06-29T20:02:11.000Z</published>
    <updated>2024-06-29T23:48:43.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p><p>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p><strong>Example 1:</strong></p><p>!<a href="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg">https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg</a></p><p><img src="https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [3,9,20,null,null,15,7]</span><br><span class="line">Output: 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,null,2]</span><br><span class="line">Output: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li><li><code>100 &lt;= Node.val &lt;= 100</code></li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        _depth = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node , depth</span>):</span><br><span class="line">            <span class="keyword">nonlocal</span> _depth</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            _depth = <span class="built_in">max</span>(depth , _depth)</span><br><span class="line"></span><br><span class="line">            left = dfs(node.left , depth + <span class="number">1</span> )</span><br><span class="line">            right = dfs(node.right , depth + <span class="number">1</span> )</span><br><span class="line">        </span><br><span class="line">        dfs(root,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> _depth</span><br></pre></td></tr></table></figure><h2 id="使用Divide-and-Conquer"><a href="#使用Divide-and-Conquer" class="headerlink" title="使用Divide and Conquer"></a>使用Divide and Conquer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDepth</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        maxdep_left = self.maxDepth(root.left) + <span class="number">1</span></span><br><span class="line">        maxdep_right = self.maxDepth(root.right) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxdep_left , maxdep_right , <span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given the &lt;code&gt;root&lt;/code&gt; of a bina</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="easy" scheme="https://pochunyeh.com/tags/easy/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Tree" scheme="https://pochunyeh.com/tags/Tree/"/>
    
    <category term="Depth-First Search" scheme="https://pochunyeh.com/tags/Depth-First-Search/"/>
    
    <category term="Breadth-First Search" scheme="https://pochunyeh.com/tags/Breadth-First-Search/"/>
    
    <category term="Binary Tree" scheme="https://pochunyeh.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#380. Insert Delete GetRandom O(1)</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-380-Insert-Delete-GetRandom-O-1/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-380-Insert-Delete-GetRandom-O-1/</id>
    <published>2024-06-29T19:25:46.000Z</published>
    <updated>2024-06-29T23:48:43.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Implement the <code>RandomizedSet</code> class:</p><ul><li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li><li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li><li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li><li><code>int getRandom()</code> Returns a random element from the current set of elements (it’s guaranteed that at least one element exists when this method is called). Each element must have the <strong>same probability</strong> of being returned.</li></ul><p>You must implement the functions of the class such that each function works in <strong>average</strong> <code>O(1)</code> time complexity.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]</span><br><span class="line">[[], [1], [2], [2], [], [1], [2], []]</span><br><span class="line">Output</span><br><span class="line">[null, true, false, true, 2, true, false, 2]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">RandomizedSet randomizedSet = new RandomizedSet();</span><br><span class="line">randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.</span><br><span class="line">randomizedSet.remove(2); // Returns false as 2 does not exist in the set.</span><br><span class="line">randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].</span><br><span class="line">randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.</span><br><span class="line">randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].</span><br><span class="line">randomizedSet.insert(2); // 2 was already in the set, so return false.</span><br><span class="line">randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>231 &lt;= val &lt;= 231 - 1</code></li><li>At most <code>2 * 105</code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li><li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>dict 可以用pop 、del，但是沒有remove</p><p>random套件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.dicts = &#123;&#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> self.dicts:</span><br><span class="line">            self.dicts[val] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">in</span> self.dicts:</span><br><span class="line">            <span class="comment"># del self.dicts[val]</span></span><br><span class="line">            self.dicts.pop(val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getRandom</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> random.choice( <span class="built_in">list</span>(self.dicts.keys()) ) </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = RandomizedSet()</span></span><br><span class="line"><span class="comment"># param_1 = obj.insert(val)</span></span><br><span class="line"><span class="comment"># param_2 = obj.remove(val)</span></span><br><span class="line"><span class="comment"># param_3 = obj.getRandom()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Implement the &lt;code&gt;RandomizedSet&lt;/co</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Hash Table" scheme="https://pochunyeh.com/tags/Hash-Table/"/>
    
    <category term="Design" scheme="https://pochunyeh.com/tags/Design/"/>
    
    <category term="Math" scheme="https://pochunyeh.com/tags/Math/"/>
    
    <category term="Randomized" scheme="https://pochunyeh.com/tags/Randomized/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#274. H-Index</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-274-H-Index/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-274-H-Index/</id>
    <published>2024-06-29T19:00:30.000Z</published>
    <updated>2024-06-29T19:02:21.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>ith</code> paper, return <em>the researcher’s h-index</em>.</p><p>According to the <a href="https://en.wikipedia.org/wiki/H-index">definition of h-index on Wikipedia</a>: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: citations = [3,0,6,1,5]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.</span><br><span class="line">Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: citations = [1,3,1]</span><br><span class="line">Output: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>n == citations.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= citations[i] &lt;= 1000</code></li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hIndex</span>(<span class="params">self, citations: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums = <span class="built_in">sorted</span>(citations)</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> n - i &lt;= nums[i]:</span><br><span class="line">                <span class="keyword">return</span> n-i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改enumerate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hIndex</span>(<span class="params">self, citations: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums = <span class="built_in">sorted</span>(citations)</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i,val <span class="keyword">in</span>  <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> n - i &lt;= val:</span><br><span class="line">                <span class="keyword">return</span> n-i</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given an array of integers &lt;code&gt;cita</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Sorting" scheme="https://pochunyeh.com/tags/Sorting/"/>
    
    <category term="Counting Sort" scheme="https://pochunyeh.com/tags/Counting-Sort/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#122. Best Time to Buy and Sell Stock II</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-122-Best-Time-to-Buy-and-Sell-Stock-II/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-122-Best-Time-to-Buy-and-Sell-Stock-II/</id>
    <published>2024-06-29T17:24:05.000Z</published>
    <updated>2024-06-29T17:26:37.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p><p>On each day, you may decide to buy and&#x2F;or sell the stock. You can only hold <strong>at most one</strong> share of the stock at any time. However, you can buy it then immediately sell it on the <strong>same day</strong>.</p><p>Find and return <em>the <strong>maximum</strong> profit you can achieve</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: prices = [7,1,5,3,6,4]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</span><br><span class="line">Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.</span><br><span class="line">Total profit is 4 + 3 = 7.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: prices = [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.</span><br><span class="line">Total profit is 4.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: prices = [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 10^4</code></li><li><code>0 &lt;= prices[i] &lt;= 10^4</code></li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p><a href="../Leetcode-121-Best-Time-to-Buy-and-Sell-Stock">Leetcode-121-Best-Time-to-Buy-and-Sell-Stock</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        new_ = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> , <span class="built_in">len</span>(prices)):</span><br><span class="line"></span><br><span class="line">            new_.append( prices[i] - prices[i-<span class="number">1</span>] )</span><br><span class="line"></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(new_)):</span><br><span class="line">            <span class="keyword">if</span> new_[i] &gt; <span class="number">0</span>:</span><br><span class="line">                res += new_[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">#two point</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        _<span class="built_in">min</span> = prices[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)):</span><br><span class="line">            <span class="keyword">if</span> _<span class="built_in">min</span> &gt; prices[j]:</span><br><span class="line">                _<span class="built_in">min</span> = prices[j]</span><br><span class="line">            <span class="keyword">elif</span> _<span class="built_in">min</span> &lt; prices[j]:</span><br><span class="line">                res += prices[j] - _<span class="built_in">min</span></span><br><span class="line">                _<span class="built_in">min</span> = prices[j]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="優化"><a href="#優化" class="headerlink" title="優化"></a>優化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> , <span class="built_in">len</span>(prices)):</span><br><span class="line">            <span class="keyword">if</span> prices[i] - prices[i-<span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                res += prices[i] - prices[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;You are given an integer array &lt;code&gt;</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Dynamic Programming" scheme="https://pochunyeh.com/tags/Dynamic-Programming/"/>
    
    <category term="Greedy" scheme="https://pochunyeh.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#189. Rotate Arra</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-189-Rotate-Arra/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-189-Rotate-Arra/</id>
    <published>2024-06-29T17:04:44.000Z</published>
    <updated>2024-06-29T17:05:19.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an integer array <code>nums</code>, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,5,6,7], k = 3</span><br><span class="line">Output: [5,6,7,1,2,3,4]</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: [7,1,2,3,4,5,6]</span><br><span class="line">rotate 2 steps to the right: [6,7,1,2,3,4,5]</span><br><span class="line">rotate 3 steps to the right: [5,6,7,1,2,3,4]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,-100,3,99], k = 2</span><br><span class="line">Output: [3,99,-1,-100]</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: [99,-1,-100,3]</span><br><span class="line">rotate 2 steps to the right: [3,99,-1,-100]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>231 &lt;= nums[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= k &lt;= 105</code></li></ul><p><strong>Follow up:</strong></p><ul><li>Try to come up with as many solutions as you can. There are at least <strong>three</strong> different ways to solve this problem.</li><li>Could you do it in-place with <code>O(1)</code> extra space?</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h3 id="錯1"><a href="#錯1" class="headerlink" title="錯1"></a>錯1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        nums = nums[ n - k:] + nums[:n-k]</span><br></pre></td></tr></table></figure><p>由於leetcode 判定nums &#x3D; nums[ n - k:n] + nums[0:n-k]</p><p>為建造新的一個變數，所以原先的並未改變</p><h3 id="改成-但資測一樣錯的-，只是記錄一下leetcode的機制"><a href="#改成-但資測一樣錯的-，只是記錄一下leetcode的機制" class="headerlink" title="改成(但資測一樣錯的)，只是記錄一下leetcode的機制"></a>改成(<code>但資測一樣錯的</code>)，只是記錄一下leetcode的機制</h3><p>nums&#x3D;</p><p>→</p><p>nums[:]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        nums[:] = nums[ n - k:] + nums[:n-k]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">nums = [1,2]</span></span><br><span class="line"><span class="string">k=5</span></span><br><span class="line"><span class="string">Output = [1,2]</span></span><br><span class="line"><span class="string">Expected = [2,1]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="解"><a href="#解" class="headerlink" title="解"></a><code>解</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        k = k % n</span><br><span class="line">        nums[:] = nums[ n - k:n] + nums[<span class="number">0</span>:n-k]</span><br></pre></td></tr></table></figure><p>%做餘數</p><p>確保k 在[0,n-1]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/co</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Two Pointers" scheme="https://pochunyeh.com/tags/Two-Pointers/"/>
    
    <category term="Math" scheme="https://pochunyeh.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#169. Majority Element</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-169-Majority-Element/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-169-Majority-Element/</id>
    <published>2024-06-29T16:24:26.000Z</published>
    <updated>2024-06-29T16:27:01.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.</p><p>The majority element is the element that appears more than <code>⌊n / 2⌋</code> times. You may assume that the majority element always exists in the array.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,3]</span><br><span class="line">Output: 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,2,1,1,1,2,2]</span><br><span class="line">Output: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5 * 104</code></li><li><code>109 &lt;= nums[i] &lt;= 109</code></li></ul><p><strong>Follow-up:</strong></p><p>Could you solve the problem in linear time and in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(1)</span><br></pre></td></tr></table></figure><p>space?</p><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">majorityElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dicts = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> dicts:</span><br><span class="line">                dicts[nums[i]]+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dicts[nums[i]] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dicts[nums[i]] &gt; <span class="built_in">len</span>(nums) / <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> nums[i]</span><br></pre></td></tr></table></figure><h2 id="簡化"><a href="#簡化" class="headerlink" title="簡化"></a>簡化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">majorityElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dicts = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> dicts:</span><br><span class="line">                dicts[num] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dicts[num] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dicts[num] &gt; <span class="built_in">len</span>(nums) / <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><h2 id="特殊解法"><a href="#特殊解法" class="headerlink" title="特殊解法"></a>特殊解法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">majorityElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums.sort()</span><br><span class="line">        ans = <span class="built_in">len</span>(nums) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> nums[ans]</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">majorityElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums.sort()</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">return</span> nums[n//<span class="number">2</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of s</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="easy" scheme="https://pochunyeh.com/tags/easy/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Hash Table" scheme="https://pochunyeh.com/tags/Hash-Table/"/>
    
    <category term="Divide and Conquer" scheme="https://pochunyeh.com/tags/Divide-and-Conquer/"/>
    
    <category term="Sorting" scheme="https://pochunyeh.com/tags/Sorting/"/>
    
    <category term="Counting" scheme="https://pochunyeh.com/tags/Counting/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode#80. Remove Duplicates from Sorted Array II</title>
    <link href="https://pochunyeh.com/posts/leetcode/Leetcode-80-Remove-Duplicates-from-Sorted-Array-II/"/>
    <id>https://pochunyeh.com/posts/leetcode/Leetcode-80-Remove-Duplicates-from-Sorted-Array-II/</id>
    <published>2024-06-29T16:02:05.000Z</published>
    <updated>2024-06-29T16:10:04.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove some duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a> such that each unique element appears <strong>at most twice</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>.</p><p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code> should hold the final result. It does not matter what you leave beyond the first <code>k</code> elements.</p><p>Return <code>k</code> <em>after placing the final result in the first</em> <code>k</code> <em>slots of</em> <code>nums</code>.</p><p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a></strong> with O(1) extra memory.</p><p><strong>Custom Judge:</strong></p><p>The judge will test your solution with the following code:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,1,2,2,3]</span><br><span class="line">Output: 5, nums = [1,1,2,2,3,_]</span><br><span class="line">Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,0,1,1,1,1,2,3,3]</span><br><span class="line">Output: 7, nums = [0,0,1,1,2,3,3,_,_]</span><br><span class="line">Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li></ul><h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p><a href="../Leetcode-26-Remove-Duplicates-from-Sorted-Array">Leetcode-26-Remove-Duplicates-from-Sorted-Array</a></p><p>two point 重點</p><p>0~i : 已經處理過<code>要保留的</code></p><p>i~j : 已經處理過 <code>不需要保留</code></p><p>j~ : <code>未見過得</code> </p><p>所以從i &#x3D; 2開始看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        i = <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != nums[i-<span class="number">2</span>]:</span><br><span class="line"></span><br><span class="line">                nums[i]=nums[j]</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><h2 id="錯誤紀錄"><a href="#錯誤紀錄" class="headerlink" title="錯誤紀錄"></a>錯誤紀錄</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">removeDuplicates</span>(<span class="params">nums</span>):</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    star = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> , <span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[j] == nums[i] <span class="keyword">and</span> star:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            star = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> nums[j] != nums[i]:</span><br><span class="line">            star = <span class="literal">True</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            nums[i]= nums[j]</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(nums[:i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">removeDuplicates(nums)</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">removeDuplicates(nums)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">[1, 1, 2, 2, 3]</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">[0, 0, 1, 1, 2, 3, 2, 3, 3]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;code&gt;Problem&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/co</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/categories/Leetcode/"/>
    
    
    <category term="Leetcode" scheme="https://pochunyeh.com/tags/Leetcode/"/>
    
    <category term="Python" scheme="https://pochunyeh.com/tags/Python/"/>
    
    <category term="💡" scheme="https://pochunyeh.com/tags/%F0%9F%92%A1/"/>
    
    <category term="medium" scheme="https://pochunyeh.com/tags/medium/"/>
    
    <category term="Array" scheme="https://pochunyeh.com/tags/Array/"/>
    
    <category term="Two Pointers" scheme="https://pochunyeh.com/tags/Two-Pointers/"/>
    
  </entry>
  
</feed>
